using D6UWHX_HFT_2021221.Logic.Interfaces;using D6UWHX_HFT_2021221.Models;using D6UWHX_HFT_2021221.Repository.Interfaces;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace D6UWHX_HFT_2021221.Logic.Classes{    public class AlbumLogic : IAlbumLogic<Album>    {        private readonly IAlbumRepository<Album> _albumRepository;        public AlbumLogic(IAlbumRepository<Album> albumRepository)        {            _albumRepository = albumRepository;        }        public void CreateAlbum(int albumID, string title, double basePrice)        {            Album album = new Album            { AlbumID = albumID, Title = title, BasePrice = basePrice };            _albumRepository.Create(album);        }        public void DeleteAlbum(int albumID)        {            Album album = _albumRepository.Read(albumID);            if (album == null)            {                throw new Exception("Not valid album id");            }            _albumRepository.Delete(albumID);        }        public Album GetAlbum(int albumID)        {            Album album = _albumRepository.Read(albumID);            if (album == null)            {                throw new Exception("not valid albumId");            }            else                return album;        }        public List<Album> GetAlbums()        {            return _albumRepository.GetAll()                    .ToList();        }        //da        public void UpdateAlbum(Album album)        {            Album currentAlbum = _albumRepository.Read(album.AlbumID);            if (currentAlbum == null)            {                throw new Exception("Not Existing");            }            currentAlbum.Title = album.Title;            currentAlbum.BasePrice = album.BasePrice;            _albumRepository.Update(currentAlbum);        }        public List<Album> GetAlbumRepositoryOrderedByTitle()        {            return _albumRepository.GetAll()                .OrderBy(album => album.Title)                .ToList();        }        public double AVGPrice()        {            return _albumRepository.GetAll()                .Average(t => t.BasePrice);        }        public IEnumerable<KeyValuePair<string, double>> AVGPriceByAlbums()        {            return from x in _albumRepository.GetAll()                   group x by x.Track.NamePlace into g                   select new KeyValuePair<string, double>                   (g.Key, g.Average(t => t.BasePrice));        }    }}